start: function*

function: _function_decl ASSIGN_OP _block
_function_decl: _FUNC identifier _PAREN_L parameter_list _PAREN_R
parameter_list: (identifier ("," identifier)*)?

statement: _expr ";"
_block: _BLOCK_L statement* _BLOCK_R

_expr:   binary_expr
?binary_expr:    _assign_expr
_assign_expr:   _sum_expr
                | _sum_expr ASSIGN_OP _expr
_sum_expr:  _prod_expr
            | _prod_expr ADD_OP _expr
            | _prod_expr SUB_OP _expr
_prod_expr: unary_expr
            | unary_expr MUL_OP _expr
            | unary_expr DIV_OP _expr
?unary_expr:    NEGATIVE_OP unary_expr
                | NOT_OP unary_expr
                | call
!?call: atom (  _PAREN_L call_arguments? _PAREN_R
                | "." identifier )*
call_arguments: _expr ( "," _expr )*

integer: INT
float: DECIMAL
bool: [TRUE | FALSE]
identifier: CNAME
?atom:  integer
        | float
        | bool
        | identifier
        | _PAREN_L _expr _PAREN_R

// Operators
ASSIGN_OP: "="
ADD_OP: "+"
SUB_OP: "-"
MUL_OP: "*"
DIV_OP: "/"
_PAREN_L: "("
_PAREN_R: ")"
NEGATIVE_OP: "-"
NOT_OP: "!"

_BLOCK_L: "{"
_BLOCK_R: "}"

// Constants
TRUE: "true"
FALSE: "false"
NULL: "null"

// Keywords
_FUNC: "func"
IF: "if"
WHILE: "while"

%import common.WORD
%import common.INT
%import common.DECIMAL
%import common.CNAME
%ignore " "
